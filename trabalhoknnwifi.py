# -*- coding: utf-8 -*-
"""TrabalhoKNNWifi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14uO_dc4j_MNxHw6RZHXb1jybOeCAbOW5
"""

import os

os.chdir('/content/sample_data')

!ls

# Carregar bibliotecas
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, plot_confusion_matrix, precision_score, recall_score, f1_score

wifi_data = pd.read_csv("wifi.csv")

wifi_data.head()

wifi_data.info()

wifi_data.columns

wifi_data.columns[0]

y = wifi_data[['Classe']].values #Y recebe a Classe

y #Y recebe a Classe

x = wifi_data[['Luk-Home-2.4', 'Luk-Home-5.0', 'WJ', 'SISTEMA', 'VIVO']].values #X recebe os Dados

x #X recebe os Dados

x.mean(axis=0)

x.std(axis=0)

xnorm = (x-x.mean(axis=0))/x.std(axis=0)

xnorm.mean(axis=0)

xnorm.std(axis=0)

model = KNeighborsClassifier(n_neighbors=4)

model.fit(xnorm, np.ravel(y,order='C'))

xtest = np.array([[95, 100, 10, 0, 0]])

xtest_norm = (xtest-x.mean(axis=0))/x.std(axis=0)

model.predict(xtest_norm)

model.predict_proba(xtest_norm)

from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.metrics import accuracy_score

sss = StratifiedShuffleSplit(n_splits=10, test_size=0.15, train_size=0.7, random_state=0) #70% Treino, 15% Teste

lacc = []
for train_index, test_index in sss.split(xnorm, np.ravel(y,order='C')):
    xtrain = xnorm[train_index]
    ytrain = y[train_index]
    xtest  = xnorm[test_index]
    ytest  = y[test_index]
    model.fit(xtrain, np.ravel(ytrain,order='C'))
    ypred=model.predict(xtest)
    acc = accuracy_score(ytest,ypred)
    print(acc)
    lacc.append(acc)
print("Média: %4.3f  Std: %4.3f "%(np.mean(lacc), np.std(lacc)))

#accuracy_score acima

lacc = []
for train_index, test_index in sss.split(xnorm, np.ravel(y,order='C')):
    xtrain = xnorm[train_index]
    ytrain = y[train_index]
    xtest  = xnorm[test_index]
    ytest  = y[test_index]
    model.fit(xtrain, np.ravel(ytrain,order='C'))
    ypred=model.predict(xtest)
    acc = precision_score(ytest,ypred, average='micro')
    print(acc)
    lacc.append(acc)
print("Média: %4.3f  Std: %4.3f "%(np.mean(lacc), np.std(lacc)))

#precision_score acima

lacc = []
for train_index, test_index in sss.split(xnorm, np.ravel(y,order='C')):
    xtrain = xnorm[train_index]
    ytrain = y[train_index]
    xtest  = xnorm[test_index]
    ytest  = y[test_index]
    model.fit(xtrain, np.ravel(ytrain,order='C'))
    ypred=model.predict(xtest)
    acc = recall_score(ytest,ypred, average='micro')
    print(acc)
    lacc.append(acc)
print("Média: %4.3f  Std: %4.3f "%(np.mean(lacc), np.std(lacc)))

#recall_score acima

lacc = []
for train_index, test_index in sss.split(xnorm, np.ravel(y,order='C')):
    xtrain = xnorm[train_index]
    ytrain = y[train_index]
    xtest  = xnorm[test_index]
    ytest  = y[test_index]
    model.fit(xtrain, np.ravel(ytrain,order='C'))
    ypred=model.predict(xtest)
    acc = f1_score(ytest,ypred, average='micro')
    print(acc)
    lacc.append(acc)
print("Média: %4.3f  Std: %4.3f "%(np.mean(lacc), np.std(lacc)))

#f1_score acima

#confusion_matrix abaixo:

sss = StratifiedShuffleSplit(n_splits=1, test_size=0.15, train_size=0.7, random_state=0) #70% Treino, 15% Teste

sss.split(xnorm, np.ravel(y,order='C'))
xtrain = xnorm
ytrain = y
xtest  = xnorm
ytest  = y
model.fit(xtrain, np.ravel(ytrain,order='C'))
ypred=model.predict(xtest)
acc = plot_confusion_matrix(model, xtest, ypred)
print(acc)
    #lacc.append(acc)
#print("Média: %4.3f  Std: %4.3f "%(np.mean(lacc), np.std(lacc)))